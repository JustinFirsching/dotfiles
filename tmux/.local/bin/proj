#!/usr/bin/env bash

PROJECT_DIRS=(
    "$HOME/Notes"
)

function find_projects() {
    SRC_DIRS=${SRC_DIRS:-"$HOME/src"}

    local project_dirs=$(find $SRC_DIRS -mindepth 1 -maxdepth 1 -type d,l 2>/dev/null)
    if [ -z "$project_dirs" ]; then
        >&2 echo "No projects found! Project directories searched: $SRC_DIRS"
        return 1
    else
        echo "$project_dirs"
        for project_dir in "${PROJECT_DIRS[@]}"; do
            if [ -d "$project_dir" ]; then
                echo "$project_dir"
            fi
        done
    fi
}

function __select_project() {
    local query=$1
    local project_dirs=$(find_projects | sort)
    fzf --filepath-word --query="$query" -1 <<< "$project_dirs"
}

function __get_tmux_session_name_from_dir() {
    # What are the odds we have two projects with the same name that we want
    # different windows for? Low. What are the odds if we account for it now? 0
    local dirname=$1
    local base_dir=$(basename -- "$dirname")

    shift
    local project_dirs=${@:-$(find_projects)}
    local num_common_basenames=$(xargs -i basename -- {} <<< "$project_dirs" | grep -cwx "$base_dir")

    local session_name=$base_dir
    # This sed replaces each directory with the first letter of its name.
    if [ "$num_common_basenames" -gt 1 ]; then
        session_name=$(sed -e 's#\([^/]\)[^/]*/#\1/#g' <<< "$dirname")
    fi
    tr '.' '_' <<< "$session_name"
}

function __create_session() {
    local session_name=$1
    local start_dir=${2:-$HOME}
    # If there isn't a session yet, make one
    if ! tmux has-session -t "=$session_name" 2>/dev/null; then
        tmux new-session -d -s "$session_name" -c "$start_dir"
    fi

}

function __attach_tmux() {
    # If we are in TMUX now
    local session_name=$1
    if [ -z "$TMUX" ]; then
        tmux attach-session -t "=$session_name"
    else
        tmux switch-client -t "=$session_name"
    fi
}

function proj() {
    local query=$1
    local selected_dir=$(__select_project "$query")

    # Use the directory name as the project name
    local proj_name=$(basename -- "$selected_dir")
    if [ -z "$proj_name" ]; then
        return 1
    fi

    local session_name=$(__get_tmux_session_name_from_dir "$selected_dir")

    __create_session "$session_name" "$selected_dir"
    __attach_tmux "$session_name"
}

proj $@
